// Code generated by generate.sh. DO NOT EDIT.

package vghw

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// CommandType implements vghw.Command.
func (cmd *MoveCommand) CommandType() string { return "MOVE" }

// MarshalJSON implements vghw.Command.
func (cmd *MoveCommand) MarshalJSON() ([]byte, error) {
	type raw MoveCommand
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "MOVE",
		Data: (*raw)(cmd),
	})
}

// CommandType implements vghw.Command.
func (cmd *JoinCommand) CommandType() string { return "JOIN" }

// MarshalJSON implements vghw.Command.
func (cmd *JoinCommand) MarshalJSON() ([]byte, error) {
	type raw JoinCommand
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "JOIN",
		Data: (*raw)(cmd),
	})
}

// UnmarshalCommand unmarshals a JSON body to an Command.
func UnmarshalCommand(raw json.RawMessage) (Command, error) {
	var partial struct {
		Type string `json:"type"`
	}

	if err := json.Unmarshal(raw, &partial); err != nil {
		return nil, err
	}

	var body struct {
		Data Command `json:"d"`
	}

	switch partial.Type {
	case "MOVE":
		body.Data = &MoveCommand{}
	case "JOIN":
		body.Data = &JoinCommand{}
	default:
		return nil, fmt.Errorf("unknown command type %q", partial.Type)
	}

	if err := json.Unmarshal(raw, &body); err != nil {
		return nil, errors.Wrap(err, "cannot unmarshal command data")
	}

	return body.Data, nil
}
