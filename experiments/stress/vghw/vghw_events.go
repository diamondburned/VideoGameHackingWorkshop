// Code generated by generate.sh. DO NOT EDIT.

package vghw

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// EventType implements vghw.Event.
func (ev *HelloEvent) EventType() string { return "HELLO" }

// MarshalJSON implements vghw.Event.
func (ev *HelloEvent) MarshalJSON() ([]byte, error) {
	type raw HelloEvent
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "HELLO",
		Data: (*raw)(ev),
	})
}

// EventType implements vghw.Event.
func (ev *EntityMoveEvent) EventType() string { return "ENTITY_MOVE" }

// MarshalJSON implements vghw.Event.
func (ev *EntityMoveEvent) MarshalJSON() ([]byte, error) {
	type raw EntityMoveEvent
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "ENTITY_MOVE",
		Data: (*raw)(ev),
	})
}

// EventType implements vghw.Event.
func (ev *WarningEvent) EventType() string { return "WARNING" }

// MarshalJSON implements vghw.Event.
func (ev *WarningEvent) MarshalJSON() ([]byte, error) {
	type raw WarningEvent
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "WARNING",
		Data: (*raw)(ev),
	})
}

// EventType implements vghw.Event.
func (ev *LevelJoinedEvent) EventType() string { return "LEVEL_JOINED" }

// MarshalJSON implements vghw.Event.
func (ev *LevelJoinedEvent) MarshalJSON() ([]byte, error) {
	type raw LevelJoinedEvent
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "LEVEL_JOINED",
		Data: (*raw)(ev),
	})
}

// EventType implements vghw.Event.
func (ev *LevelFinishedEvent) EventType() string { return "LEVEL_FINISHED" }

// MarshalJSON implements vghw.Event.
func (ev *LevelFinishedEvent) MarshalJSON() ([]byte, error) {
	type raw LevelFinishedEvent
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "LEVEL_FINISHED",
		Data: (*raw)(ev),
	})
}

// EventType implements vghw.Event.
func (ev *LeaderboardUpdateEvent) EventType() string { return "LEADERBOARD_UPDATE" }

// MarshalJSON implements vghw.Event.
func (ev *LeaderboardUpdateEvent) MarshalJSON() ([]byte, error) {
	type raw LeaderboardUpdateEvent
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "LEADERBOARD_UPDATE",
		Data: (*raw)(ev),
	})
}

// EventType implements vghw.Event.
func (ev *PersonalScoreEvent) EventType() string { return "PERSONAL_SCORE" }

// MarshalJSON implements vghw.Event.
func (ev *PersonalScoreEvent) MarshalJSON() ([]byte, error) {
	type raw PersonalScoreEvent
	return json.Marshal(struct {
		Type string `json:"type"`
		Data *raw   `json:"d"`
	}{
		Type: "PERSONAL_SCORE",
		Data: (*raw)(ev),
	})
}

// UnmarshalEvent unmarshals a JSON body to an Event.
func UnmarshalEvent(raw json.RawMessage) (Event, error) {
	var partial struct {
		Type string `json:"type"`
	}

	if err := json.Unmarshal(raw, &partial); err != nil {
		return nil, err
	}

	var body struct {
		Data Event `json:"d"`
	}

	switch partial.Type {
	case "HELLO":
		body.Data = &HelloEvent{}
	case "ENTITY_MOVE":
		body.Data = &EntityMoveEvent{}
	case "WARNING":
		body.Data = &WarningEvent{}
	case "LEVEL_JOINED":
		body.Data = &LevelJoinedEvent{}
	case "LEVEL_FINISHED":
		body.Data = &LevelFinishedEvent{}
	case "LEADERBOARD_UPDATE":
		body.Data = &LeaderboardUpdateEvent{}
	case "PERSONAL_SCORE":
		body.Data = &PersonalScoreEvent{}
	default:
		return nil, fmt.Errorf("unknown event type %q", partial.Type)
	}

	if err := json.Unmarshal(raw, &body); err != nil {
		return nil, errors.Wrap(err, "cannot unmarshal event data")
	}

	return body.Data, nil
}
